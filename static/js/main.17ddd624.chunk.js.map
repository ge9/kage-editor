{"version":3,"sources":["actions/editor.ts","reducers/editor.ts","reducers/index.ts","components/GlyphArea.tsx","containers/GlyphArea.ts","App.tsx","serviceWorker.ts","i18n.ts","index.tsx"],"names":["editorActions","selectSingle","actionCreatorFactory","actionCreator","editor","reducerWithInitialState","glyph","selection","case","state","index","combineReducers","GlyphArea","props","connect","dispatch","App","className","Boolean","window","location","hostname","match","resources","ja","translation","i18n","use","initReactI18next","init","lng","returnObjects","interpolation","escapeValue","store","createStore","reducer","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0TAIaA,EAAgB,CAC3BC,a,MAHoBC,GAAqB,SAG3BC,CAAsB,kBCmBvBC,EALAC,kCALmB,CAChCC,MAAO,GACPC,UAAW,KAIVC,KAAKR,EAAcC,cAAc,SAACQ,EAAOC,GAAR,mBAAC,eAC5BD,GAD2B,IACpBF,UAAW,CAACG,QCbbC,cAA0B,CACvCP,WCOaQ,G,YANG,SAACC,GAAD,OAChB,6CCMaC,eANS,SAACL,GAAD,sBAA2BA,EAAML,WAE9B,SAACW,GAAD,MAAyC,CAClEd,aAAc,SAACS,GAAD,OAAmBK,EAASf,EAAcC,aAAaS,QAGxDI,CAA6CF,GCD7CI,MAXf,WACE,OACE,yBAAKC,UAAU,OACb,yBAAKA,UAAU,cAAa,kBAAC,EAAD,OAC5B,yBAAKA,UAAU,oBAEf,yBAAKA,UAAU,sBCCDC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,mBCbAC,EAAY,CAChBC,GAAI,CACFC,Y,QAIJC,IACGC,IAAIC,KACJC,KAAK,CACJN,YACAO,IAAK,KAELC,eAAe,EACfC,cAAe,CACbC,aAAa,KAIJP,EAAf,EAAeA,ICXTQ,EAAQC,YAAYC,GAE1BC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,CAAUL,MAAOA,GACf,kBAAC,EAAD,QAGJM,SAASC,eAAe,SFuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.17ddd624.chunk.js","sourcesContent":["import actionCreatorFactory from 'typescript-fsa';\n\nconst actionCreator = actionCreatorFactory('EDITOR');\n\nexport const editorActions = {\n  selectSingle: actionCreator<number>('SELECT_SINGLE'),\n};\n","import { reducerWithInitialState } from 'typescript-fsa-reducers';\n\nimport { editorActions } from '../actions/editor';\n\nexport interface GlyphLine {\n  value: number[];\n  partName?: string;\n}\n\nexport interface EditorState {\n  glyph: GlyphLine[];\n  selection: number[];\n}\n\nconst initialState: EditorState = {\n  glyph: [],\n  selection: [],\n};\n\nconst editor = reducerWithInitialState(initialState)\n  .case(editorActions.selectSingle, (state, index) => (\n    { ...state, selection: [index] }\n  ));\n\nexport default editor;\n","import { combineReducers } from 'redux';\n\nimport editor, { EditorState } from './editor';\n\nexport type AppState = {\n  editor: EditorState;\n};\n\nexport default combineReducers<AppState>({\n  editor,\n});\n","import React from 'react';\n\nimport { EditorState } from '../reducers/editor';\nimport { GlyphAreaActions } from '../containers/GlyphArea';\n\ninterface OwnProps {\n}\n\ntype GlyphAreaProps = OwnProps & EditorState & GlyphAreaActions;\n\nconst GlyphArea = (props: GlyphAreaProps) => (\n  <div>\n    glyph area\n  </div>\n)\n\nexport default GlyphArea;\n","import { Action } from 'typescript-fsa';\nimport { connect } from 'react-redux';\nimport { editorActions } from '../actions/editor';\nimport GlyphArea from '../components/GlyphArea';\nimport { AppState } from '../reducers';\nimport { Dispatch } from 'redux';\n\nexport interface GlyphAreaActions {\n  selectSingle: (index: number) => Action<number>;\n}\n\nconst mapStateToProps = (state: AppState) => ({ ...state.editor });\n\nconst mapDispatchToProps = (dispatch: Dispatch<Action<number>>) => ({\n  selectSingle: (index: number) => dispatch(editorActions.selectSingle(index))\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(GlyphArea);\n","import React from 'react';\nimport './App.css';\n\nimport GlyphArea from './containers/GlyphArea';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div className=\"glyph-area\"><GlyphArea /></div>\n      <div className=\"editor-controls\">\n      </div>\n      <div className=\"parts-list-area\" />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import i18n from 'i18next';\nimport { initReactI18next } from 'react-i18next';\n\nimport jaTranslation from './locales/ja.json';\n\nconst resources = {\n  ja: {\n    translation: jaTranslation,\n  },\n};\n\ni18n\n  .use(initReactI18next) // passes i18n down to react-i18next\n  .init({\n    resources,\n    lng: 'ja', // TODO: detect from parameter\n\n    returnObjects: true,\n    interpolation: {\n      escapeValue: false, // react already safes from xss\n    },\n  });\n\nexport default i18n;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { Provider } from 'react-redux';\nimport { createStore } from 'redux';\nimport reducer from './reducers';\n\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport './i18n';\n\nconst store = createStore(reducer);\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}