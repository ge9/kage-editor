{"version":3,"sources":["kageUtils.ts","actions/editor.ts","args.ts","reducers/editor.ts","reducers/index.ts","components/Stroke.tsx","components/Glyph.tsx","components/GlyphArea.tsx","containers/GlyphArea.ts","App.tsx","serviceWorker.ts","i18n.ts","index.tsx"],"names":["glyphStr","editorActions","selectSingle","actionCreatorFactory","actionCreator","unparseGlyphLine","glyphLine","values","value","slice","partName","join","args","URLSearchParams","window","location","hash","initialState","glyph","get","split","map","line","glyphLineStr","splitLine","numColumns","strokeType","getNumColumns","i","push","Math","floor","parseGlyphLine","filter","gLine","length","selection","editor","reducerWithInitialState","case","state","index","combineReducers","StrokeComponent","props","polygons","array","polygon","key","points","x","y","kage","Kage","GlyphComponent","polygonsSep","useMemo","data","makeGlyphSeparated","deselected","selected","forEach","includes","className","Stroke","GlyphArea","width","height","viewBox","connect","dispatch","App","Boolean","hostname","match","resources","ja","translation","host","lng","i18n","use","initReactI18next","init","returnObjects","interpolation","escapeValue","store","createStore","reducer","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.3419f111.chunk.js","sourcesContent":["export interface GlyphLine {\n  value: number[];\n  partName?: string;\n}\n\nexport const getNumColumns = (strokeType: number): number => {\n  switch (strokeType) {\n    case 0:\n    case 1:\n    case 9:\n      return 7;\n    case 2:\n      return 9;\n    case 3:\n    case 4:\n    case 6:\n    case 99:\n      return 11;\n    default:\n      return 0;\n  }\n};\n\nexport const parseGlyphLine = (glyphLineStr: string): GlyphLine => {\n  const splitLine = glyphLineStr.split(':');\n  const strokeType = +splitLine[0];\n  const numColumns = getNumColumns(strokeType);\n  const value = [];\n  for (let i = 0; i < numColumns; i++) {\n    value.push(Math.floor(+splitLine[i] || 0));\n  }\n  if (value[0] === 99) {\n    const partName = splitLine[7] || '';\n    return { value, partName }\n  }\n  return { value };\n};\n\nexport const unparseGlyphLine = (glyphLine: GlyphLine): string => {\n  const values: (number | string)[] = glyphLine.value.slice();\n  if (values[0] === 99) {\n    values[7] = glyphLine.partName || '';\n  }\n  return values.join(':');\n};\n\nexport const isValidGlyphLine = (glyphLine: GlyphLine): boolean => (\n  glyphLine.value.length !== 0 &&\n  (\n    glyphLine.value[0] !== 0 ||\n    glyphLine.value[1] === 97 || glyphLine.value[1] === 98 || glyphLine.value[1] === 99\n  )\n);\n\nexport type Glyph = GlyphLine[];\n\nexport const parseGlyph = (glyphStr: string): Glyph => (\n  glyphStr.split(/[$\\r\\n]+/)\n    .map((line) => parseGlyphLine(line))\n    .filter((gLine) => isValidGlyphLine(gLine))\n);\n\nexport const unparseGlyph = (glyph: Glyph): string => (\n  glyph\n    .map((gLine) => unparseGlyphLine(gLine))\n    .join('$')\n);\n","import actionCreatorFactory from 'typescript-fsa';\n\nconst actionCreator = actionCreatorFactory('EDITOR');\n\nexport const editorActions = {\n  selectSingle: actionCreator<number>('SELECT_SINGLE'),\n};\n","const args = new URLSearchParams(window.location.hash.slice(1));\n\nexport default args;\n","import { reducerWithInitialState } from 'typescript-fsa-reducers';\n\nimport { editorActions } from '../actions/editor';\nimport { Glyph, parseGlyph } from '../kageUtils';\n\nimport args from '../args';\n\n\nexport interface EditorState {\n  glyph: Glyph;\n  selection: number[];\n}\n\nconst initialState: EditorState = {\n  glyph: parseGlyph(args.get('data') || ''),\n  selection: [],\n};\n\nconst editor = reducerWithInitialState(initialState)\n  .case(editorActions.selectSingle, (state, index) => (\n    { ...state, selection: [index] }\n  ));\n\nexport default editor;\n","import { combineReducers } from 'redux';\n\nimport editor, { EditorState } from './editor';\n\nexport type AppState = {\n  editor: EditorState;\n};\n\nexport default combineReducers<AppState>({\n  editor,\n});\n","import React from 'react';\n\nimport { Polygons } from '@kurgm/kage-engine';\n\nexport interface StrokeComponentProps {\n  polygons: Polygons;\n}\n\nconst StrokeComponent = (props: StrokeComponentProps) => (\n  <>\n    {props.polygons.array.map((polygon, i) => (\n      <polygon key={i} points={polygon.array.map(({ x, y }) => `${x},${y} `).join(\"\")} />\n    ))}\n  </>\n);\n\nexport default StrokeComponent;\n","import React, { useMemo } from 'react';\n\nimport { Kage, Polygons } from '@kurgm/kage-engine';\n\nimport { Glyph, unparseGlyphLine } from '../kageUtils';\nimport Stroke from './Stroke';\n\nimport './Glyph.css'\n\nexport interface GlyphComponentProps {\n  glyph: Glyph;\n  selection: number[];\n}\n\nconst kage = new Kage();\n\ntype IndexedPolygons = {\n  polygons: Polygons;\n  index: number;\n}\n\nconst GlyphComponent = (props: GlyphComponentProps) => {\n  const polygonsSep = useMemo(() => {\n    const data = props.glyph.map(unparseGlyphLine);\n    return kage.makeGlyphSeparated(data);\n  }, [props.glyph]);\n\n  const deselected: IndexedPolygons[] = [];\n  const selected: IndexedPolygons[] = [];\n\n  polygonsSep.forEach((polygons, index) => {\n    if (props.selection.includes(index)) {\n      selected.push({ polygons, index });\n    } else {\n      deselected.push({ polygons, index });\n    }\n  });\n\n  return (\n    <>\n      <g className=\"strokes-deselected\">\n        {deselected\n          .map(({ polygons, index }) => <Stroke polygons={polygons} key={index} />)\n        }\n      </g>\n      <g className=\"strokes-selected\">\n        {selected\n          .map(({ polygons, index }) => <Stroke polygons={polygons} key={index} />)\n        }\n      </g>\n    </>\n  );\n};\n\nexport default GlyphComponent;\n","import React from 'react';\n\nimport { EditorState } from '../reducers/editor';\n\nimport Glyph from './Glyph';\n\nimport { GlyphAreaActions } from '../containers/GlyphArea';\nimport './GlyphArea.css';\n\ninterface OwnProps {\n}\n\ntype GlyphAreaProps = OwnProps & EditorState & GlyphAreaActions;\n\nconst GlyphArea = (props: GlyphAreaProps) => (\n  <div className=\"glyph-area\">\n    <svg width=\"100%\" height=\"100%\" viewBox=\"-20 -20 500 240\">\n      {/* TODO: grid */}\n      <rect x=\"0\" y=\"0\" width=\"200\" height=\"200\" className=\"glyph-boundary\" />\n      <rect x=\"12\" y=\"12\" width=\"176\" height=\"176\" className=\"glyph-guide\" />\n      <Glyph glyph={props.glyph} selection={props.selection} />\n      {/* TODO: control points */}\n    </svg>\n  </div>\n);\n\nexport default GlyphArea;\n","import { Action } from 'typescript-fsa';\nimport { connect } from 'react-redux';\nimport { editorActions } from '../actions/editor';\nimport GlyphArea from '../components/GlyphArea';\nimport { AppState } from '../reducers';\nimport { Dispatch } from 'redux';\n\nexport interface GlyphAreaActions {\n  selectSingle: (index: number) => Action<number>;\n}\n\nconst mapStateToProps = (state: AppState) => ({ ...state.editor });\n\nconst mapDispatchToProps = (dispatch: Dispatch<Action<number>>) => ({\n  selectSingle: (index: number) => dispatch(editorActions.selectSingle(index))\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(GlyphArea);\n","import React from 'react';\nimport './App.css';\n\nimport GlyphArea from './containers/GlyphArea';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <GlyphArea />\n      <div className=\"editor-controls\">\n      </div>\n      <div className=\"parts-list-area\" />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import i18n from 'i18next';\nimport { initReactI18next } from 'react-i18next';\n\nimport jaTranslation from './locales/ja.json';\n\nimport args from \"./args\";\n\nconst resources = {\n  ja: {\n    translation: jaTranslation,\n  },\n};\n\nconst host = args.get('host');\nlet lng = 'ja';\nif (host) {\n  switch (host.split('.')[0]) {\n    case 'en':\n      lng = 'en';\n      break;\n    case 'ko':\n      lng = 'ko';\n      break;\n    case 'zhs':\n      lng = 'zh-Hans';\n      break;\n    case 'zht':\n      lng = 'zh-Hant';\n      break;\n  }\n}\n\ni18n\n  .use(initReactI18next) // passes i18n down to react-i18next\n  .init({\n    resources,\n    lng,\n\n    returnObjects: true,\n    interpolation: {\n      escapeValue: false, // react already safes from xss\n    },\n  });\n\nexport default i18n;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { Provider } from 'react-redux';\nimport { createStore } from 'redux';\nimport reducer from './reducers';\n\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport './i18n';\n\nconst store = createStore(reducer);\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}